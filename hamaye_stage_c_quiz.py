# -*- coding: utf-8 -*-
"""Hamaye_Stage C_quiz

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VlO1CdGHRWwzBj8GUhnudPqWxmO8bGMR
"""

import pandas as pd

df= pd.read_csv("https://archive.ics.uci.edu/ml/machine-learning-databases/00471/Data_for_UCI_named.csv")

df.head()

df.isnull().sum()

df.duplicated().sum()

df.info()

#exploring the dependent variable
df["stabf"].nunique()

#check the distribution of the target variable
df["stabf"].value_counts()

# drop stab because of its direct relationship with stabf
df= df.drop("stab", axis =1)

# selecting feature and target variables
X = df.drop(columns='stabf')
y = df['stabf']

#split the data into training and testing sets
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

print('X_train shape: {}'.format(x_train.shape))
print('y_train shape: {}'.format(y_train.shape))
print('X_test shape: {}'.format(x_test.shape))
print('y_test shape: {}'.format(y_test.shape))

#standardise train and test set using standard scaler

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
scaler.fit(x_train)

standardised_train_df = scaler.transform(x_train)
standardised_test_df = scaler.transform(x_test)

# put the data into a data frame
standardised_train_df = pd.DataFrame(standardised_train_df, columns=x_train.columns)
standardised_test_df = pd.DataFrame(standardised_test_df, columns=x_test.columns)
print('standardised_train_df: {}'.format(standardised_train_df.shape))
print('standardised_test_df: {}'.format(standardised_test_df.shape))



"""Random Forest classifier"""

#train a RandomForestClassifier 
from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier(random_state = 1)
#fit on train set
rfc.fit(standardised_train_df, y_train)
# predictions the test set
rfc_pred = rfc.predict(standardised_test_df)
rfc_pred.shape

# model performance
from sklearn.metrics import recall_score, accuracy_score, precision_score, f1_score, confusion_matrix, classification_report

#model accuracy
accuracy = accuracy_score(y_test, rfc_pred)
print('Accuracy: {}'.format(round(accuracy*100), 4))


#precision
precision = precision_score(y_test, rfc_pred, pos_label='stable')
print('Precision: {}'.format(round(precision*100), 2))  

#recall
recall = recall_score(y_test, rfc_pred, pos_label='stable')
print('Recall: {}'.format(round(recall*100), 2))

#F1 score
f1 = f1_score(y_test, rfc_pred, pos_label='stable')
print('F1: {}'.format(round(f1*100), 2))

#classification report
print('Classification Report:\n', classification_report(y_test,rfc_pred, digits =4))

#confusion matrix
rfc_cnf_mat = confusion_matrix(y_test, rfc_pred, labels=['unstable', 'stable'])
print('Confusion Matrix:\n', rfc_cnf_mat)

print("Training set score: {:.4f}".format(rfc.score(standardised_train_df, y_train)))
print("Test set score: {:.4f}".format(rfc.score(standardised_test_df, y_test)))

"""Extra Tree classifier"""

from  sklearn.ensemble import ExtraTreesClassifier
etc = RandomForestClassifier(random_state = 1)
#fit on train set
etc.fit(standardised_train_df, y_train)
# predictions the test set
etc_pred = etc.predict(standardised_test_df)
etc_pred.shape

# extra tree classifier model performance
#accuracy
accuracy = accuracy_score(y_test, etc_pred)
print('Accuracy: {}'.format(round(accuracy*100), 4))


#precision
precision = precision_score(y_test, etc_pred, pos_label='stable')
print('Precision: {}'.format(round(precision*100), 2))  

#recall
recall = recall_score(y_test, etc_pred, pos_label='stable')
print('Recall: {}'.format(round(recall*100), 2))

#F1 score
f1 = f1_score(y_test, etc_pred, pos_label='stable')
print('F1: {}'.format(round(f1*100), 2))

#classification report
print('Classification Report:\n', classification_report(y_test,etc_pred, digits =4))

#confusion matrix
etc_cnf_mat = confusion_matrix(y_test, etc_pred, labels=['unstable', 'stable'])
print('Confusion Matrix:\n', etc_cnf_mat)



"""light gradient boosting classifier"""

from lightgbm import LGBMClassifier

lgb= LGBMClassifier(random_state = 1)

#fit the model
lgb.fit(standardised_train_df, y_train)

#predict on test set
lgb_pred = lgb.predict(standardised_test_df)

# Model Performance of Light GBM Classifier
#accuracy
lgb_accuracy = accuracy_score(y_test, lgb_pred)
print('Accuracy: {}'.format(round(lgb_accuracy*100), 2))

#precision
lgb_precision = precision_score(y_test, lgb_pred, pos_label='stable')
print('Precision: {}'.format(round(lgb_precision*100), 2))  

#recall
lgb_recall = recall_score(y_test, lgb_pred, pos_label='stable')
print('Recall: {}'.format(round(lgb_recall*100), 2))

#F1 score
lgb_f1 = f1_score(y_test, lgb_pred, pos_label='stable')
print('F1: {}'.format(round(lgb_f1*100), 2))

#classification report
print('Classification Report:\n', classification_report(y_test,lgb_pred, digits =4))

#confusion matrix
lgb_cnf_mat = confusion_matrix(y_test, lgb_pred)
print('Confusion Matrix:\n', lgb_cnf_mat)

print("Training set score: {:.4f}".format(lgb.score(standardised_train_df, y_train)))
print("Test set score: {:.4f}".format(lgb.score(standardised_test_df, y_test)))

"""XGBOOST """

from xgboost import XGBRegressor
xgb = XGBRegressor()
xgb.fit(standardised_train_df, y_train)

xgb = XGBRegressor(objective='reg:squarederror')

#combination of hyperparameters
n_estimators = [50, 100, 300, 500, 1000]

min_samples_split = [2, 3, 5, 7, 9]

min_samples_leaf = [1, 2, 4, 6, 8]

max_features = ['auto', 'sqrt', 'log2', None] 

hyperparameter_grid = {'n_estimators': n_estimators,

                       'min_samples_leaf': min_samples_leaf,

                       'min_samples_split': min_samples_split,

                       'max_features': max_features}

from sklearn.model_selection import RandomizedSearchCV

#etc = ExtraTreesClassifier(random_state = 1)

#set up randomsearch with 5folds

randomcv = RandomizedSearchCV(estimator = etc, 
                              param_distributions = hyperparameter_grid, cv=5, n_iter=10, scoring = 'accuracy', n_jobs = -1, verbose = 1,
                              random_state = 1)

